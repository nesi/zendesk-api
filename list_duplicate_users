#!/usr/bin/env python3

# Get a list of suspected duplicate users in Zendesk.
#
# Author: Benjamin Roberts <ben.roberts@nesi.org.nz>

import sys,os
import re
import getpass
import json
import requests

progdir = os.path.dirname(__file__)
progname = os.path.basename(__file__)
uwf = os.path.join(progdir, 'user_whitelist.txt')
dwf = os.path.join(progdir, 'duplicate_user_whitelist.txt')
cff = os.path.join(progdir, 'canonical_first_names.txt')

with open(uwf) as uwfh:
    user_whitelist = uwfh.read().splitlines()
duplicate_user_whitelist = []
with open(dwf) as dwfh:
    for line in dwfh:
        pair = line.rstrip().split('\t')
        pair.sort(key=int)
        duplicate_user_whitelist.append(pair)
with open(cff) as cffh:
    canonical_firstnames = dict(line.strip().split('\t') for line in cffh)

allusers = []
suffixes = ['Jr.', 'Jr', 'Sr.', 'Sr', 'III.', 'III', '(Personal)']

website = "nesi.zendesk.com"
headers = { 'Content-Type' : 'application/json' }
preferred_locale = "en-gb"

print("This script requires that you have a so-called default password for Zendesk")
print("(i.e., a different password than your single sign-on password through Tuakiri).")
print("If you do not have such a password or have forgotten it, please visit:")
print("")
print("      https://{0}/access/help".format(website))
print("")
zdmyusername = input("Please enter your Zendesk primary email address: ")
zdmypassword = getpass.getpass("Please enter your Zendesk default password: ")

main_users_url = "https://{0}/api/v2/users.json".format(website)
users_url = main_users_url
while users_url:
    try:
        users_page = requests.get(users_url, auth=(zdmyusername, zdmypassword))
    except ValueError:
        print("Could not fetch JSON data from which to compile a list of users.")
        print("Perhaps your username and/or password was not entered correctly?")
        sys.exit(1)
    users_page_content = users_page.json()
    try:
        for user in users_page_content['users']:
            allusers.append({'id': user['id'], 'name': user['name']})
    except KeyError:
        print("Could not fetch JSON data from which to compile a list of users.")
        print("Perhaps your username and/or password was not entered correctly?")
        sys.exit(1)
    users_url = users_page_content['next_page']

# Perform some name integrity checks and canonicalise names
for user in allusers:
    name_components = user['name'].split()
    user['firstname'] = name_components[0]
    user['middlenames'] = None
    try:
        user['canonical_firstname'] = canonical_firstnames[user['firstname']]
    except KeyError:
        user['canonical_firstname'] = user['firstname']
    for uwe in user_whitelist:
        if user['name'] == uwe:
            user['surname'] = None
            break
    else:
        if len(name_components) > 2:
            for suffix in suffixes:
                if name_components[-1] == suffix:
                    name_components[-2] = re.sub(r',$', '', name_components[-2])
                    user['surname'] = name_components[-2]
                    if len(name_components) > 3:
                        user['middlenames'] = name_components[1:-2]
                    #print("Found suffixed name \"{0}\" -- assuming surname of \"{1}\"".format(user['name'],user['surname']))
                    break
            else:
                user['surname'] = name_components[-1]
                user['middlenames'] = name_components[1:-1]
        elif len(name_components) > 1:
            user['surname'] = name_components[-1]
        else:
            user['surname'] = None

        revised_name = ' '.join(name_components)
        commacount = revised_name.count(',')
        if commacount > 0:
            if commacount > 1:
                print("Error: User {0} found with multiple commas in name!".format(user['name']))
            else:
                swapped_name = re.subn(r'^([^,]+),\s*([^,]+)$', r'\2 \1', revised_name)
                print("Error: User {0} found with precisely one comma in name. Canonical name: {1}?".format(user['name'], swapped_name))
            print("Please correct in Zendesk or add to whitelist.")
            sys.exit(1)

dups = 0

for userone in allusers:
    for usertwo in allusers:
        if int(userone['id']) >= int(usertwo['id']):
            continue
        for dwe in duplicate_user_whitelist:
            if int(userone['id']) == int(dwe[0]) and int(usertwo['id']) == int(dwe[1]):
                break
        else:
            try:
                if userone['surname'] is None and usertwo['surname'] is None:
                    if re.search(r'\s', userone['name']) is not None and userone['name'] == usertwo['name']:
                        print("Suspected duplicates: \"{0}\" ({1}), \"{2}\" ({3})".format(userone['name'], userone['id'], usertwo['name'], usertwo['id']))
                        dups += 1
                elif userone['surname'] == usertwo['surname']:
                    # Compare only the first three characters of the first names and the canonical first names
                    # Also compare middle names (if they are defined)
                    if userone['firstname'][:3].lower() == usertwo['firstname'][:3].lower() or userone['canonical_firstname'][:3].lower() == usertwo['canonical_firstname'][:3].lower():
                        if userone['middlenames'] is not None and usertwo['middlenames'] is not None:
                            mn_mismatch = False
                            maxmiddlenames = max([len(userone['middlenames']), len(usertwo['middlenames'])])
                            for mn in range(maxmiddlenames):
                                try:
                                    if userone['middlenames'][mn][0].lower() != usertwo['middlenames'][mn][0].lower():
                                        mn_mismatch = True
                                        break
                                except ValueError:
                                    break
                            if mn_mismatch:
                                continue
                        print("Suspected duplicates: \"{0}\" ({1}), \"{2}\" ({3})".format(userone['name'], userone['id'], usertwo['name'], usertwo['id']))
                        dups += 1
            
            except KeyError:
                print("Error!")
                print(userone)
                print(usertwo)

if dups > 1:
    print("There are {0} suspected duplicate Zendesk users.".format(str(dups)))
elif dups == 1:
    print("There is one suspected duplicate Zendesk user.")
else:
    print("There are no suspected duplicate Zendesk users.")
